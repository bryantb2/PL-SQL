-- PROBLEM 1
SELECT * FROM STUDENT;
SELECT * FROM FRESHMAN;
SELECT * FROM SOPHOMORE;
SELECT * FROM JUNIOR;
SELECT * FROM SENIOR;

DESCRIBE STUDENT;
DESCRIBE SENIOR;

set feedback on;
set serveroutput on;
CREATE OR REPLACE PROCEDURE SET_STUDENT_TABLES
IS
  CURSOR STUDENT_CUR IS 
    (SELECT * FROM STUDENT);
BEGIN
  FOR STUDENT_REC IN STUDENT_CUR
  LOOP
    INSERT_STUDENT(STUDENT_REC.STUDENT_FIRST_NAME, STUDENT_REC.STUDENT_LAST_NAME, STUDENT_REC.STUDENT_ID, STUDENT_REC.FK_STUDENT_TYPE_ID);
  END LOOP;
  --DBMS_OUTPUT.PUT_LINE(STUDENT_CUR);
END SET_STUDENT_TABLES;


CREATE OR REPLACE PROCEDURE INSERT_STUDENT
  (FNAME_ARG IN VARCHAR2, 
   LNAME_ARG IN VARCHAR2, 
   STUDENT_ID_ARG IN VARCHAR2,
   STUDENT_TYPE IN VARCHAR2)
IS 
BEGIN
DBMS_OUTPUT.PUT_LINE('INSERT HAS FIRED');
  CASE STUDENT_TYPE
    WHEN 'F' THEN
      INSERT INTO FRESHMAN
      VALUES (STUDENT_ID_ARG, FNAME_ARG, LNAME_ARG);
    WHEN 'S' THEN 
      INSERT INTO SOPHOMORE
      VALUES (STUDENT_ID_ARG, FNAME_ARG, LNAME_ARG);
    WHEN 'J' THEN
      INSERT INTO JUNIOR
      VALUES (STUDENT_ID_ARG, FNAME_ARG, LNAME_ARG);
    WHEN 'R' THEN
      INSERT INTO SENIOR
      VALUES (STUDENT_ID_ARG, FNAME_ARG, LNAME_ARG);
  END CASE;    
END INSERT_STUDENT;

EXEC SET_STUDENT_TABLES;


-- PROBLEM 2
drop table product cascade constraints;
drop table customer cascade constraints;
drop table purchase cascade constraints;
drop table inventory cascade constraints;
drop table line_item cascade constraints;

CREATE TABLE PRODUCT
(PRODUCT_ID VARCHAR2(50) PRIMARY KEY,
PRODUCT_NAME VARCHAR2(50) NOT NULL,
PRODUCT_PRICE DECIMAL(6, 2) NOT NULL,
PRODUCT_COST  DECIMAL(6,2));

CREATE TABLE CUSTOMER
(CUSTOMER_ID NUMBER(10) PRIMARY KEY,
CUSTOMER_LNAME VARCHAR2(30) NOT NULL,
CUSTOMER_FNAME VARCHAR2(30) NOT NULL
);

CREATE TABLE PURCHASE
(PURCHASE_ID NUMBER(10) PRIMARY KEY,
PURCHASE_DATE DATE NOT NULL,
FK_CUSTOMER_ID NUMBER(10) NOT NULL,
FOREIGN KEY (FK_CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID));

CREATE TABLE INVENTORY
(INVENTORY_ID VARCHAR2(50) PRIMARY KEY,
QUANTITY_ON_HAND NUMBER(6) NOT NULL,
FK_PRODUCT_ID VARCHAR2(50) NOT NULL,
FOREIGN KEY (FK_PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID));

CREATE TABLE LINE_ITEM
(LINE_ITEM_ID NUMBER(25) PRIMARY KEY,
FK_PRODUCT_ID VARCHAR2(30) NOT NULL,
LINE_ITEM_QUANTITY NUMBER(5),
FK_PURCHASE_ID NUMBER(10) NOT NULL,
FOREIGN KEY (FK_PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID), 
FOREIGN KEY (FK_PURCHASE_ID) REFERENCES PURCHASE(PURCHASE_ID));

INSERT ALL 
INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_LNAME, CUSTOMER_FNAME) VALUES (8000, 'Baratheon', 'Joffrey')
INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_LNAME, CUSTOMER_FNAME) VALUES (8001, 'Lannister', 'Jaime')
INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_LNAME, CUSTOMER_FNAME) VALUES (8002, 'Lannister', 'Tyrion')
INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_LNAME, CUSTOMER_FNAME) VALUES (8003, 'Stark', 'Bran')
INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_LNAME, CUSTOMER_FNAME) VALUES (8004, 'Tarth', 'Brienne')
INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_LNAME, CUSTOMER_FNAME) VALUES (8005, 'Targaryen', 'Daenerys')
SELECT * FROM dual;

INSERT ALL
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME,PRODUCT_PRICE, PRODUCT_COST) VALUES ('1', 'Eggplant', 2.00, 1.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('2', 'Bible', 20.00,10.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME,PRODUCT_PRICE,PRODUCT_COST) VALUES ('3', 'T-Shirt', 25.00,15.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME,  PRODUCT_PRICE,PRODUCT_COST) VALUES ('4', 'History of Buckfast Abbey', 25.00,15.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('5', 'Cinnamon Candle', 10.00,5.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('6', 'Strawberry Jam', 8.00,4.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('7', 'Buckfast County Guide', 18.00,9.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('8', 'Decorative Cross', 8.00,4.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('9', 'Tote Bag', 6.00,3.00)
INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE,PRODUCT_COST) VALUES ('10', 'A Monks Life',16.00,8.00)
SELECT * FROM dual;


INSERT ALL
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE,FK_CUSTOMER_ID) VALUES (50, SYSDATE,  8004)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE,  FK_CUSTOMER_ID) VALUES (51, SYSDATE,8001)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE, FK_CUSTOMER_ID) VALUES (52, SYSDATE,8000)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE, FK_CUSTOMER_ID) VALUES (53, SYSDATE, 8003)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE,  FK_CUSTOMER_ID) VALUES (54, SYSDATE,8005)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE, FK_CUSTOMER_ID) VALUES (55, SYSDATE, 8005)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE, FK_CUSTOMER_ID) VALUES (56, SYSDATE, 8003)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE, FK_CUSTOMER_ID) VALUES (57, SYSDATE,  8002)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE,  FK_CUSTOMER_ID) VALUES (58, SYSDATE,  8000)
INTO PURCHASE(PURCHASE_ID, PURCHASE_DATE, FK_CUSTOMER_ID) VALUES (59, SYSDATE, 8005)
SELECT * FROM dual;

INSERT ALL
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(1, 50, '2', 2)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(2, 51, '3', 1)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(3, 52, '1', 2)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(4, 53, '2', 4)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(5, 54, '4', 1)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(6, 55, '5', 4)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(7, 56, '3', 5)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(8, 57, '4', 1)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(9, 58, '1', 8)
INTO LINE_ITEM(LINE_ITEM_ID, FK_PURCHASE_ID, FK_PRODUCT_ID, LINE_ITEM_QUANTITY) VALUES(10, 59, '4', 12)
SELECT * FROM dual;

INSERT ALL
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD01', 50, '1')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD02', 50, '2')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD03', 50, '3')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD04', 50, '4')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD05', 50, '5')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD06', 50, '6')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD07', 50, '7')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD08', 50, '8')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD09', 50, '9')
INTO INVENTORY (INVENTORY_ID, QUANTITY_ON_HAND, FK_PRODUCT_ID) VALUES ('PROD10', 50, '10')
SELECT * FROM dual;

COMMIT;

SELECT * FROM PURCHASE;
SELECT * FROM LINE_ITEM;
SELECT * FROM PRODUCT;
SELECT * FROM INVENTORY;
DESCRIBE PRODUCT;
DESCRIBE INVENTORY;

SELECT SUM(LINE_ITEM.LINE_ITEM_QUANTITY) AS QUANTITY, 
  LINE_ITEM.FK_PRODUCT_ID AS PRODUCT_ID, PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_PRICE, PRODUCT.PRODUCT_COST
  FROM PURCHASE
  JOIN LINE_ITEM ON LINE_ITEM.FK_PURCHASE_ID = PURCHASE.PURCHASE_ID
  JOIN PRODUCT ON LINE_ITEM.FK_PRODUCT_ID = PRODUCT.PRODUCT_ID
  GROUP BY LINE_ITEM.FK_PRODUCT_ID, PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_PRICE, PRODUCT.PRODUCT_COST
  ORDER BY LINE_ITEM.FK_PRODUCT_ID;

/*
SELECT PURCHASE.PURCHASE_ID, LINE_ITEM.LINE_ITEM_QUANTITY AS QUANTITY, 
  LINE_ITEM.FK_PRODUCT_ID AS PRODUCT_ID, PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_PRICE
  FROM PURCHASE
  JOIN LINE_ITEM ON LINE_ITEM.FK_PURCHASE_ID = PURCHASE.PURCHASE_ID
  JOIN PRODUCT ON LINE_ITEM.FK_PRODUCT_ID = PRODUCT.PRODUCT_ID
*/


CREATE OR REPLACE PROCEDURE HANDLE_PURCHASES
IS
  CURSOR PURCHASE_CUR IS
    (SELECT SUM(LINE_ITEM.LINE_ITEM_QUANTITY) AS QUANTITY, 
      LINE_ITEM.FK_PRODUCT_ID AS PRODUCT_ID, PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_PRICE, PRODUCT.PRODUCT_COST
      FROM PURCHASE
      JOIN LINE_ITEM ON LINE_ITEM.FK_PURCHASE_ID = PURCHASE.PURCHASE_ID
      JOIN PRODUCT ON LINE_ITEM.FK_PRODUCT_ID = PRODUCT.PRODUCT_ID
      GROUP BY LINE_ITEM.FK_PRODUCT_ID, PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_PRICE, PRODUCT.PRODUCT_COST);
      
    TOTAL_SALES_COST NUMBER := 0;
    TOTAL_SALES_PRICE NUMBER := 0;
BEGIN
  FOR PURCHASE_REC IN PURCHASE_CUR
  LOOP
    -- INCREMENT RUNNING COUNTERS
    TOTAL_SALES_COST := TOTAL_SALES_COST + (PURCHASE_REC.PRODUCT_COST * PURCHASE_REC.QUANTITY);
    TOTAL_SALES_PRICE := TOTAL_SALES_PRICE + (PURCHASE_REC.PRODUCT_PRICE * PURCHASE_REC.QUANTITY);
    -- UPDATE PRODUCT INVENTORY
    UPDATE_PRODUCT_INV(PURCHASE_REC.QUANTITY, PURCHASE_REC.PRODUCT_ID);
    -- PRINT SALES VALUES
    DBMS_OUTPUT.PUT_LINE(PURCHASE_REC.PRODUCT_NAME || ' GARNERED ' || 
      TO_CHAR(PURCHASE_REC.PRODUCT_PRICE * PURCHASE_REC.QUANTITY,'L999G999D99') || ' IN RETAIL REVENUE');
    DBMS_OUTPUT.PUT_LINE('THE SOLD ITEMS COSTED THE RETAILER ' || TO_CHAR(PURCHASE_REC.PRODUCT_COST * PURCHASE_REC.QUANTITY,'L999G999D99'));
    DBMS_OUTPUT.PUT_LINE('-------------------------------------');
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('TOTAL SALES COST WAS ' || TO_CHAR(TOTAL_SALES_COST,'L999G999D99'));
  DBMS_OUTPUT.PUT_LINE('TOTAL RETAIL REVENUE WAS ' || TO_CHAR(TOTAL_SALES_COST,'L999G999D99'));
END HANDLE_PURCHASES;


CREATE OR REPLACE PROCEDURE UPDATE_PRODUCT_INV
  (QUANTITY_ARG IN NUMBER,
   PRODUCT_ID_ARG IN VARCHAR2)
IS
BEGIN
  UPDATE INVENTORY
  SET INVENTORY.QUANTITY_ON_HAND = INVENTORY.QUANTITY_ON_HAND - QUANTITY_ARG
  WHERE INVENTORY.FK_PRODUCT_ID = PRODUCT_ID_ARG;
END UPDATE_PRODUCT_INV;

EXEC HANDLE_PURCHASES;

SELECT * FROM INVENTORY;





