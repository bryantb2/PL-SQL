-- PROBLEM 1
CREATE OR REPLACE PACKAGE PAYMENT_LAB_PCK IS
  TYPE LIST_OF_PAYMENTS IS TABLE OF PAYMENT%ROWTYPE
      INDEX BY PLS_INTEGER;
END PAYMENT_LAB_PCK;
      
CREATE OR REPLACE PROCEDURE CREATE_PAYMENT_COLLECTION
(PLEDGE_ID_ARG IN NUMBER,
PAYMENT_LIST OUT PAYMENT_LAB_PCK.LIST_OF_PAYMENTS)
IS
  -- GET PAYMENT DATA
  CURSOR PAYMENT_CUR IS
    SELECT * 
    FROM PAYMENT
    WHERE PAYMENT.IDPLEDGE = PLEDGE_ID_ARG;
  -- SETUP ROW INDEX
  ROW_INDEX PLS_INTEGER := 0;  
BEGIN
  -- FILL ARRAY
  FOR PAYMENT_REC IN PAYMENT_CUR
  LOOP
    -- PUT RECORD DATA INTO ARRAY
    PAYMENT_LIST (ROW_INDEX)  := PAYMENT_REC;
    -- INCREMENT INDEX
    ROW_INDEX := ROW_INDEX + 1;
  END LOOP;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    DBMS_OUTPUT.PUT_LINE('A NO DATA ERROR HAS OCCURED IN THE AGENT BONUS. MOST LIKELY BECAUSE PLEDGE ID DOES NOT EXIST IN DATABASE.');
END;

-- TEST PAYMENT COLLECTION
SELECT * FROM PAYMENT WHERE IDPLEDGE = 109;
DESCRIBE PAYMENT;
DECLARE
  -- PAYMENT COLLECTION
  PAYMENT_LIST PAYMENT_LAB_PCK.LIST_OF_PAYMENTS;
BEGIN
  -- GET PAYMENT DATA
  CREATE_PAYMENT_COLLECTION(109, PAYMENT_LIST);
  -- PRINT ARRAY
  FOR INDX IN PAYMENT_LIST.FIRST .. PAYMENT_LIST.LAST
  LOOP
    DBMS_OUTPUT.PUT_LINE('------------------------------------------');
    DBMS_OUTPUT.PUT_LINE('Payment ID is: ' || PAYMENT_LIST(INDX).IDPAY);
    DBMS_OUTPUT.PUT_LINE('Payment amount is: ' || PAYMENT_LIST(INDX).PAYAMT);
    DBMS_OUTPUT.PUT_LINE('Payment date is: ' || PAYMENT_LIST(INDX).PAYDATE);
    DBMS_OUTPUT.PUT_LINE('Payment method is: ' || PAYMENT_LIST(INDX).PAYMETHOD);
  END LOOP;
END;


-- PROBLEM 2
CREATE OR REPLACE PROCEDURE AVERAGE_PAYMENTS
(PLEDGE_ID_ARG IN NUMBER,
PAYMENT_AMT_SUM OUT NUMBER,
PAYMENT_AMT_AVERAGE OUT NUMBER)
IS 
  -- PAYMENT COLLECTION
  PAYMENT_LIST PAYMENT_LAB_PCK.LIST_OF_PAYMENTS; 
  PAYMENT_SUM_COUNTER NUMBER := 0;
BEGIN
  -- GET PAYMENT DATA
  CREATE_PAYMENT_COLLECTION(109, PAYMENT_LIST);
  -- CALCULATE SUM AND AVERAGE
  FOR INDX IN PAYMENT_LIST.FIRST .. PAYMENT_LIST.LAST
  LOOP
    PAYMENT_SUM_COUNTER := PAYMENT_LIST(INDX).PAYAMT + PAYMENT_SUM_COUNTER;
  END LOOP;
  PAYMENT_AMT_SUM := PAYMENT_SUM_COUNTER;
  PAYMENT_AMT_AVERAGE := (PAYMENT_SUM_COUNTER / PAYMENT_LIST.COUNT);
END;

-- TEST PROBLEM 2
SELECT * FROM DONOR;
--SELECT * FROM PAYMENT;
SELECT * FROM PLEDGE;

DECLARE 
  PLEDGE_ID NUMBER := 107;
  PAYMENT_SUM NUMBER;
  PAYMENT_AVERAGE NUMBER;
  DONOR_FNAME DONOR.FIRSTNAME%TYPE;
  DONOR_LNAME DONOR.LASTNAME%TYPE;
BEGIN
  -- GET DONOR INFO
  SELECT DONOR.FIRSTNAME, DONOR.LASTNAME
    INTO DONOR_FNAME, DONOR_LNAME
    FROM DONOR
    JOIN PLEDGE ON PLEDGE.IDDONOR = DONOR.IDDONOR
    WHERE IDPLEDGE = PLEDGE_ID;
  -- CALCULATE PAYMENT DATA
  AVERAGE_PAYMENTS(PLEDGE_ID, PAYMENT_SUM, PAYMENT_AVERAGE);
  -- PRINT OUTPUT
  DBMS_OUTPUT.PUT_LINE('Donor name is: ' || DONOR_FNAME || ' ' || DONOR_LNAME);
  DBMS_OUTPUT.PUT_LINE('Pledge id is: '   || PLEDGE_ID);
  DBMS_OUTPUT.PUT_LINE('Pledge sum is: '  || PAYMENT_SUM);
  DBMS_OUTPUT.PUT_LINE('Pledge average is: '  || PAYMENT_AVERAGE);
END;



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

                      /*        REDESIGN WITH NEW PACKAGE SYSTEM      */

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
DROP PROCEDURE AVERAGE_PAYMENTS;
DROP PROCEDURE CREATE_PAYMENT_COLLECTION;

CREATE OR REPLACE PACKAGE PAYMENT_LAB_PCK IS
  -- TYPES
  TYPE LIST_OF_PAYMENTS IS TABLE OF PAYMENT%ROWTYPE
      INDEX BY PLS_INTEGER;
      
  -- PROCEDURES    
  PROCEDURE CREATE_PAYMENT_COLLECTION
  (PLEDGE_ID_ARG IN NUMBER,
  PAYMENT_LIST OUT LIST_OF_PAYMENTS);   
  
  PROCEDURE AVERAGE_PAYMENTS
  (PLEDGE_ID_ARG IN NUMBER,
  PAYMENT_AMT_SUM OUT NUMBER,
  PAYMENT_AMT_AVERAGE OUT NUMBER);
END PAYMENT_LAB_PCK;

CREATE OR REPLACE PACKAGE BODY PAYMENT_LAB_PCK IS
  -- PROCEDURES
  PROCEDURE CREATE_PAYMENT_COLLECTION
  (PLEDGE_ID_ARG IN NUMBER,
  PAYMENT_LIST OUT LIST_OF_PAYMENTS)
  IS
    -- GET PAYMENT DATA
    CURSOR PAYMENT_CUR IS
      SELECT * 
      FROM PAYMENT
      WHERE PAYMENT.IDPLEDGE = PLEDGE_ID_ARG;
    -- SETUP ROW INDEX
    ROW_INDEX PLS_INTEGER := 0;  
  BEGIN
    -- FILL ARRAY
    FOR PAYMENT_REC IN PAYMENT_CUR
    LOOP
      -- PUT RECORD DATA INTO ARRAY
      PAYMENT_LIST (ROW_INDEX)  := PAYMENT_REC;
      -- INCREMENT INDEX
      ROW_INDEX := ROW_INDEX + 1;
    END LOOP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN 
      DBMS_OUTPUT.PUT_LINE('A NO DATA ERROR HAS OCCURED IN THE AGENT BONUS. MOST LIKELY BECAUSE PLEDGE ID DOES NOT EXIST IN DATABASE.');
  END CREATE_PAYMENT_COLLECTION;
  
  PROCEDURE AVERAGE_PAYMENTS
  (PLEDGE_ID_ARG IN NUMBER,
  PAYMENT_AMT_SUM OUT NUMBER,
  PAYMENT_AMT_AVERAGE OUT NUMBER)
  IS 
    -- PAYMENT COLLECTION
    PAYMENT_LIST LIST_OF_PAYMENTS; 
    PAYMENT_SUM_COUNTER NUMBER := 0;
  BEGIN
    -- GET PAYMENT DATA
    CREATE_PAYMENT_COLLECTION(109, PAYMENT_LIST);
    -- CALCULATE SUM AND AVERAGE
    FOR INDX IN PAYMENT_LIST.FIRST .. PAYMENT_LIST.LAST
    LOOP
      PAYMENT_SUM_COUNTER := PAYMENT_LIST(INDX).PAYAMT + PAYMENT_SUM_COUNTER;
    END LOOP;
    PAYMENT_AMT_SUM := PAYMENT_SUM_COUNTER;
    PAYMENT_AMT_AVERAGE := (PAYMENT_SUM_COUNTER / PAYMENT_LIST.COUNT);
  END AVERAGE_PAYMENTS;
END PAYMENT_LAB_PCK;


-- TEST PACKAGE
DECLARE 
  PLEDGE_ID NUMBER := 107;
  PAYMENT_SUM NUMBER;
  PAYMENT_AVERAGE NUMBER;
  DONOR_FNAME DONOR.FIRSTNAME%TYPE;
  DONOR_LNAME DONOR.LASTNAME%TYPE;
BEGIN
  -- GET DONOR INFO
  SELECT DONOR.FIRSTNAME, DONOR.LASTNAME
    INTO DONOR_FNAME, DONOR_LNAME
    FROM DONOR
    JOIN PLEDGE ON PLEDGE.IDDONOR = DONOR.IDDONOR
    WHERE IDPLEDGE = PLEDGE_ID;
  -- CALCULATE PAYMENT DATA
  PAYMENT_LAB_PCK.AVERAGE_PAYMENTS(PLEDGE_ID, PAYMENT_SUM, PAYMENT_AVERAGE);
  -- PRINT OUTPUT
  DBMS_OUTPUT.PUT_LINE('Donor name is: ' || DONOR_FNAME || ' ' || DONOR_LNAME);
  DBMS_OUTPUT.PUT_LINE('Pledge id is: '   || PLEDGE_ID);
  DBMS_OUTPUT.PUT_LINE('Pledge sum is: '  || PAYMENT_SUM);
  DBMS_OUTPUT.PUT_LINE('Pledge average is: '  || PAYMENT_AVERAGE);
END;



