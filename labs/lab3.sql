-- PROBLEM 1
SELECT * FROM CHARGES;
DESCRIBE CHARGES;

set feedback on;
set serveroutput on;

DECLARE
  V_DAYS_SINCE_PAYMENT INTEGER;
  
  CURSOR CHARGES_CUR IS
    SELECT * FROM CHARGES;
BEGIN
  FOR CHARGE_REC IN CHARGES_CUR
  LOOP
    V_DAYS_SINCE_PAYMENT := TRUNC(SYSDATE - CHARGE_REC.LAST_PAYMENT_DATE);
    IF V_DAYS_SINCE_PAYMENT < 30 THEN
      DBMS_OUTPUT.PUT_LINE('YOU HAVE NO LATE PAYMENTS. WELL DONE.');
    ELSIF V_DAYS_SINCE_PAYMENT >= 30 AND V_DAYS_SINCE_PAYMENT < 60 THEN
      DBMS_OUTPUT.PUT_LINE('LATE PAYMENT PENALTIES APPLIED FOR BEING ' || V_DAYS_SINCE_PAYMENT || ' DAYS OVER.');
      DBMS_OUTPUT.PUT_LINE('PENALTY OF 10% APPLIED.');
    ELSIF V_DAYS_SINCE_PAYMENT >= 60 AND V_DAYS_SINCE_PAYMENT < 120 THEN
      DBMS_OUTPUT.PUT_LINE('CUSTOMER, NUMBER ' || CHARGE_REC.CUSTOMER_ID || ', MUST GO TO CUSTOMS.');
    ELSE
      DBMS_OUTPUT.PUT_LINE('CUSTOMER, NUMBER ' || CHARGE_REC.CUSTOMER_ID || ', HAS EXCEEDED THE 120 DAY MAXIMUM PAYMENT THRESHOLD. PLEASE GO TO CUSTOMER SUPPORT.');
    END IF;  
    DBMS_OUTPUT.PUT_LINE('--------------------');
  END LOOP;
END;







-- PROBLEM 2
SELECT * FROM STUDENT;
SELECT * FROM ENROLLMENT;

SELECT STUDENT.STUDENT_ID, STUDENT.STUDENT_FIRST_NAME, STUDENT.STUDENT_LAST_NAME, ENROLLMENT.GRADE
  FROM STUDENT
  JOIN ENROLLMENT ON STUDENT.STUDENT_ID = ENROLLMENT.FK_STUDENT_ID
  ORDER BY STUDENT.STUDENT_ID;

DECLARE
  V_STUDENT_GPA_POINTS NUMBER := 0;
  V_STUDENT_GRADE_COUNT NUMBER := 0;
  
  -- GET ALL STUDENT IDs
  CURSOR STUDENT_ID_CUR IS
    SELECT UNIQUE STUDENT.STUDENT_ID, STUDENT.STUDENT_FIRST_NAME, STUDENT.STUDENT_LAST_NAME
      FROM STUDENT
      WHERE STUDENT.STUDENT_ID IN 
        (SELECT ENROLLMENT.FK_STUDENT_ID
          FROM ENROLLMENT);
      
  -- GET ALL STUDENT RECORDS
  CURSOR STUDENT_GRADE_CUR IS
    SELECT STUDENT.STUDENT_ID, STUDENT.STUDENT_FIRST_NAME, STUDENT.STUDENT_LAST_NAME, ENROLLMENT.GRADE
      FROM STUDENT
      JOIN ENROLLMENT ON STUDENT.STUDENT_ID = ENROLLMENT.FK_STUDENT_ID
      ORDER BY STUDENT.STUDENT_ID;
BEGIN
    -- LOOP THROUGH STUDENT IDs
  FOR STUDENT_ID_REC IN STUDENT_ID_CUR
  LOOP
    -- LOOP THROUGH STUDENT GRADES
    FOR STUDENT_GRADE_REC IN STUDENT_GRADE_CUR
    LOOP
      -- CHECK IF CORRECT STUDENT RECORD AND GRADE IS NOT NULL
      IF STUDENT_GRADE_REC.STUDENT_ID = STUDENT_ID_REC.STUDENT_ID AND STUDENT_GRADE_REC.GRADE IS NOT NULL THEN
        -- INCREMENT GRADES BEING COUNTED
        V_STUDENT_GRADE_COUNT := V_STUDENT_GRADE_COUNT + 1;
        -- MAKE APPROPRIATE CALCULATION
        IF SUBSTR(STUDENT_GRADE_REC.GRADE, INSTR(STUDENT_GRADE_REC.GRADE, 'A'), 1) = 'A' THEN
          V_STUDENT_GPA_POINTS := 4 + V_STUDENT_GPA_POINTS;
        ELSIF SUBSTR(STUDENT_GRADE_REC.GRADE, INSTR(STUDENT_GRADE_REC.GRADE, 'B'), 1) = 'B' THEN
          V_STUDENT_GPA_POINTS := 3 + V_STUDENT_GPA_POINTS;
        ELSIF SUBSTR(STUDENT_GRADE_REC.GRADE, INSTR(STUDENT_GRADE_REC.GRADE, 'C'), 1) = 'C' THEN
          V_STUDENT_GPA_POINTS := 2 + V_STUDENT_GPA_POINTS;
        ELSIF SUBSTR(STUDENT_GRADE_REC.GRADE, INSTR(STUDENT_GRADE_REC.GRADE, 'D'), 1) = 'D' THEN
          V_STUDENT_GPA_POINTS := 1 + V_STUDENT_GPA_POINTS;
        END IF;  
      END IF;  
    END LOOP;
    -- CALCULATE GPA
    IF V_STUDENT_GRADE_COUNT != 0 THEN
      DBMS_OUTPUT.PUT_LINE('GPA FOR ' || STUDENT_ID_REC.STUDENT_FIRST_NAME || ' ' || 
        STUDENT_ID_REC.STUDENT_LAST_NAME || ' IS ' || TO_CHAR(V_STUDENT_GPA_POINTS/V_STUDENT_GRADE_COUNT, '99.99'));
    ELSE 
      DBMS_OUTPUT.PUT_LINE('GPA FOR ' || STUDENT_ID_REC.STUDENT_FIRST_NAME || ' ' || 
        STUDENT_ID_REC.STUDENT_LAST_NAME || ' IS CURRENTLY UNAVAILABLE');
    END IF;  
    -- RESET GPA POINTS
    V_STUDENT_GRADE_COUNT := 0;
    V_STUDENT_GPA_POINTS := 0;
  END LOOP;
END;












