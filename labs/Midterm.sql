-- PART 1
CREATE OR REPLACE PROCEDURE CALC_MONTHLY_PAYMENT 
(TOTAL_PLEDGE_AMOUNT IN NUMBER,
MONTHLY_PAYMENT OUT NUMBER)
IS
  INVALID_PELDGE_AMOUNT EXCEPTION;
  MONTH_COUNT NUMBER;
BEGIN
  -- DETERMINE MONTH NUMBER
  IF TOTAL_PLEDGE_AMOUNT >= 1 AND TOTAL_PLEDGE_AMOUNT < 250 THEN
    MONTH_COUNT := 3;
  ELSIF TOTAL_PLEDGE_AMOUNT >= 250 AND TOTAL_PLEDGE_AMOUNT < 500 THEN
    MONTH_COUNT := 6;
  ELSIF TOTAL_PLEDGE_AMOUNT >= 500 AND TOTAL_PLEDGE_AMOUNT < 750 THEN
    MONTH_COUNT := 9;  
  ELSIF TOTAL_PLEDGE_AMOUNT >= 750 THEN
    MONTH_COUNT := 12;
  ELSE
    RAISE INVALID_PELDGE_AMOUNT;
  END IF;
  -- CALCULATE MONTHLY PLEDGE AMOUNT
  MONTHLY_PAYMENT := (TOTAL_PLEDGE_AMOUNT / MONTH_COUNT);
EXCEPTION
  WHEN INVALID_PELDGE_AMOUNT THEN
    DBMS_OUTPUT.PUT_LINE('Invalid pledge amount. Must be more than $1.00');
END CALC_MONTHLY_PAYMENT;

set feedback on;
set serveroutput on;
DECLARE 
  BAD_TEST_PLEDGE NUMBER := -1;
  TEST_PLEDGE NUMBER := 480;
  EXPECTED_MONTH_VALUE NUMBER := 6;
  MONTHLY_PAYMENT_AMT NUMBER;
BEGIN
  -- PRINT NORMAL EXPECTED AND RESULT
  CALC_MONTHLY_PAYMENT(TEST_PLEDGE, MONTHLY_PAYMENT_AMT);
  DBMS_OUTPUT.PUT_LINE('Pledge amount of ' || TEST_PLEDGE || ', expecting a monthly pledge amount of $80. Got: ' || TO_CHAR(MONTHLY_PAYMENT_AMT, 'L999G999D99'));
  -- PRINT BAD TEST EXPECTED AND RESULT 
  CALC_MONTHLY_PAYMENT(BAD_TEST_PLEDGE, MONTHLY_PAYMENT_AMT);
  DBMS_OUTPUT.PUT_LINE('Pledge amount of ' || BAD_TEST_PLEDGE || ', expecting a monthly pledge amount of ERROR. Got: ');
END;


-- PART 2
SELECT * FROM PLEDGE;
SELECT * FROM DONOR;
DESCRIBE PLEDGE;
DESCRIBE DONOR;
CREATE OR REPLACE PROCEDURE DOUBLE_DONOR_PLEDGE
(PLEDGE_DATE DATE,
DONOR_ID NUMBER)
IS 
  NEW_PLEDGED_AMOUNT NUMBER;
BEGIN
  -- SELECT DONOR INFORMATION
  SELECT PLEDGE.PLEDGEAMT
    INTO NEW_PLEDGED_AMOUNT
    FROM PLEDGE
    WHERE PLEDGE.IDDONOR = DONOR_ID AND PLEDGE.PLEDGEDATE = PLEDGE_DATE;
  -- MODIFY PLEDGE AMOUNT
  NEW_PLEDGED_AMOUNT := NEW_PLEDGED_AMOUNT * 2;
  UPDATE PLEDGE
    SET PLEDGEAMT = NEW_PLEDGED_AMOUNT
    WHERE PLEDGE.IDDONOR = DONOR_ID AND PLEDGE.PLEDGEDATE = PLEDGE_DATE;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data was found. Likely a result of an invalid pledge_date and/or donor_id.');
END;

CREATE OR REPLACE PROCEDURE GET_PLEDGE_AMNT
(PLEDGE_DATE DATE,
DONOR_ID NUMBER,
PLEDGE_AMOUNT OUT NUMBER)
IS
BEGIN
  -- SELECT DONOR INFORMATION
  SELECT PLEDGE.PLEDGEAMT
    INTO PLEDGE_AMOUNT
    FROM PLEDGE
    WHERE PLEDGE.IDDONOR = DONOR_ID AND PLEDGE.PLEDGEDATE = PLEDGE_DATE;
END;

set feedback on;
set serveroutput on;
DECLARE 
  TEST_DONOR_ID NUMBER := 309;
  TEST_PLEDGE_DATE DATE := TO_DATE('08-OCT-2012');
  TEST_PLEDGE_AMT_BEFORE  NUMBER;
  TEST_PLEDGE_AMT_AFTER   NUMBER;
BEGIN
  -- CALCULATE VALUES
  GET_PLEDGE_AMNT(TEST_PLEDGE_DATE, TEST_DONOR_ID, TEST_PLEDGE_AMT_BEFORE);
  DOUBLE_DONOR_PLEDGE(TEST_PLEDGE_DATE, TEST_DONOR_ID);
  GET_PLEDGE_AMNT(TEST_PLEDGE_DATE, TEST_DONOR_ID, TEST_PLEDGE_AMT_AFTER);
  -- PRINT EXPECTED AND RESULT
  DBMS_OUTPUT.PUT_LINE('Doubling pledge with ID of ' || TEST_DONOR_ID || '. Original pledge amount was ' || TEST_PLEDGE_AMT_BEFORE || ', which should get '
    || ' doubled to ' || TEST_PLEDGE_AMT_BEFORE * 2 || '. Result from doubling was: ' || TEST_PLEDGE_AMT_AFTER);
    
    -- CALCULATE DATA THAT WILL THROW ERRORS
    DBMS_OUTPUT.PUT_LINE('Running donor pledge procedure on that should result in a no data error prompt: ');
    DOUBLE_DONOR_PLEDGE(TEST_PLEDGE_DATE, 400);
END;


-- PART 3
SELECT * FROM PAYMENT;
SELECT * FROM PLEDGE;
SELECT * FROM DONOR;

CREATE OR REPLACE PROCEDURE FETCH_DONOR_PAYMENT_INFO
(DONOR_ID NUMBER,
ACCOUNT_PAYMENT_COUNT OUT NUMBER,
ACCOUNT_PAYMENT_SUM OUT NUMBER)
IS 
  DONOR_RECORD DONOR%ROWTYPE;
BEGIN
  SELECT * 
    INTO DONOR_RECORD
    FROM DONOR 
    WHERE DONOR.IDDONOR = DONOR_ID;
  -- GET PAYMENT INFO
  SELECT SUM(PAYAMT), COUNT(PAYAMT)
    INTO ACCOUNT_PAYMENT_SUM, ACCOUNT_PAYMENT_COUNT
    FROM PAYMENT
    JOIN PLEDGE ON PLEDGE.IDPLEDGE = PAYMENT.IDPLEDGE
    WHERE PLEDGE.IDDONOR = DONOR_ID;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data was found. Likely a result of an invalid donor_id parameter.');    
END FETCH_DONOR_PAYMENT_INFO;

set feedback on;
set serveroutput on;
DECLARE
  TEST_DONOR_ID NUMBER := 302;
  PAYMENT_AMT_TOTAL NUMBER;
  NUMBER_OF_PAYMENTS NUMBER;
BEGIN
  -- CALCULATE PAYMENT DATA AND PRINT
  FETCH_DONOR_PAYMENT_INFO(TEST_DONOR_ID, NUMBER_OF_PAYMENTS, PAYMENT_AMT_TOTAL);
  DBMS_OUTPUT.PUT_LINE('------TEST ONE: Donor, with id of ' || TEST_DONOR_ID || ' has made ' || NUMBER_OF_PAYMENTS || ' payments, amounting to ' || '$' || PAYMENT_AMT_TOTAL);
  -- CALCULATE DATA THAT SHOULD RESULT IN ERROR
  DBMS_OUTPUT.PUT_LINE('------TEST TWO: Testing donor, with id of ' || 400 || '. Expecting no data error prompt: ');
  FETCH_DONOR_PAYMENT_INFO(400, NUMBER_OF_PAYMENTS, PAYMENT_AMT_TOTAL);
END;


-- PART 4
SELECT * FROM STATUS;
SELECT * FROM PLEDGE;
SELECT * 
  FROM PLEDGE
  JOIN STATUS ON PLEDGE.IDSTATUS = STATUS.IDSTATUS;

CREATE OR REPLACE PROCEDURE PRINT_PLEDGE_DATA
IS
  -- GET PLEDGE DATA
  CURSOR PLEDGE_CUR IS
    SELECT IDPLEDGE,PLEDGEAMT, STATUSDESC
      FROM PLEDGE
      JOIN STATUS ON PLEDGE.IDSTATUS = STATUS.IDSTATUS;
  -- SET RECORD VARIABLE
  PLEDGE_REC PLEDGE_CUR%ROWTYPE;
BEGIN
  OPEN PLEDGE_CUR;
  LOOP 
    -- FETCH EACH RECORD INTO A RECORD VARIABLE
    FETCH PLEDGE_CUR INTO PLEDGE_REC;
    EXIT WHEN PLEDGE_CUR%NOTFOUND;
    -- PRINT RECORD DATA
    DBMS_OUTPUT.PUT_LINE('--- NEW RECORD ---');
    DBMS_OUTPUT.PUT_LINE('Pledge ID is: ' || PLEDGE_REC.IDPLEDGE);
    DBMS_OUTPUT.PUT_LINE('Pledge Amount is: ' || PLEDGE_REC.PLEDGEAMT);
    DBMS_OUTPUT.PUT_LINE('Pledge Status is: ' || PLEDGE_REC.STATUSDESC);
  END LOOP;
  CLOSE PLEDGE_CUR;  
END PRINT_PLEDGE_DATA;

-- TEST
set feedback on;
set serveroutput on;
DECLARE
BEGIN
  PRINT_PLEDGE_DATA();
END;



