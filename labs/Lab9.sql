
-- PROBLEM 1
SET VERIFY on;
CREATE OR REPLACE TRIGGER WARNING_UPDATE_TRIGGER
  BEFORE UPDATE 
  ON EMPLOYEE
  FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('Warning: employee table is being updated.');
  DBMS_OUTPUT.PUT_LINE('Emp ID is: '     || :OLD.EMPLOYEE_ID);
  DBMS_OUTPUT.PUT_LINE('Name is: '       || :OLD.EMPLOYEE_FIRST || ' ' || :OLD.EMPLOYEE_LAST);
  DBMS_OUTPUT.PUT_LINE('Salary was: '    || :OLD.EMPLOYEE_SALARY);
  DBMS_OUTPUT.PUT_LINE('Salary now is: ' || :NEW.EMPLOYEE_SALARY);
END;

set feedback on;
set serveroutput on;
BEGIN
  -- UPDATE WITH ID OF 3
  UPDATE EMPLOYEE
  SET EMPLOYEE_SALARY = 200
  WHERE EMPLOYEE_ID = 3;
END;

-- PROBLEM 2
SET VERIFY on;
CREATE OR REPLACE TRIGGER WARN_CUSTOMER_CREDIT
  BEFORE INSERT
  ON CUSTOMER
  FOR EACH ROW
  WHEN(NEW.CUSTOMER_CREDIT_RATING < 5)
DECLARE
  BAD_CREDIT_LIMIT EXCEPTION;
  PRAGMA EXCEPTION_INIT(BAD_CREDIT_LIMIT, -20111);
BEGIN
  -- PRINT ERROR, THEN RAISE EXCEPTION
  DBMS_OUTPUT.PUT_LINE('Warning: cannot insert customer ' || :NEW.CUSTOMER_FIRST 
    || ' ' || :NEW.CUSTOMER_LAST || ' with a credit rating below 5. ' || 'Attempted to insert credit limit value of '
    || :NEW.CUSTOMER_CREDIT_RATING);
  RAISE_APPLICATION_ERROR(-20111, 'Credit Limit Invalid');  
END WARN_CUSTOMER_CREDIT;


set feedback on;
set serveroutput on;
DECLARE
  BAD_CREDIT_LIMIT EXCEPTION;
  PRAGMA EXCEPTION_INIT(BAD_CREDIT_LIMIT, -20111);
BEGIN
  -- INSERT RECORD DATA
  INSERT INTO CUSTOMER
  VALUES(500, 'Jeff', 'Dunham', 3);
  EXCEPTION
    WHEN BAD_CREDIT_LIMIT THEN
      DBMS_OUTPUT.PUT_LINE('Failure to insert record due to invalid credit limit data');
END;


-- PROBLEM 3
CREATE SEQUENCE AUDIT_KEY 
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1;

SET VERIFY on;
CREATE OR REPLACE TRIGGER INSERT_AUDIT_LOG
  AFTER INSERT OR UPDATE
  ON PURCHASE
  FOR EACH ROW
DECLARE
  CUSTOMER_FNAME VARCHAR2(100);
BEGIN
  -- FETCH CUSTOMER NAME
  SELECT CUSTOMER.CUSTOMER_FIRST
    INTO CUSTOMER_FNAME
    FROM CUSTOMER
    WHERE CUSTOMER.CUSTOMER_ID = :NEW.CUSTOMER_ID;
  -- INSERT INTO AUDIT LOG
  INSERT INTO PURCHASE_AUDIT
  VALUES(AUDIT_KEY.NEXTVAL, :NEW.PURCHASE_ID, :NEW.CUSTOMER_ID, :NEW.PURCHASE_DATE, :NEW.TOTAL_PURCHASE_PRICE, CUSTOMER_FNAME);
  -- LOG DATA
  DBMS_OUTPUT.PUT_LINE(:NEW.PURCHASE_ID);
  DBMS_OUTPUT.PUT_LINE(:NEW.CUSTOMER_ID);
  DBMS_OUTPUT.PUT_LINE(CUSTOMER_FNAME);
  DBMS_OUTPUT.PUT_LINE(:NEW.PURCHASE_DATE);
  DBMS_OUTPUT.PUT_LINE(:NEW.TOTAL_PURCHASE_PRICE);
END INSERT_AUDIT_LOG;

set feedback on;
set serveroutput on;
BEGIN
  -- TEST INSERT
  INSERT INTO PURCHASE
  VALUES(1, 1, SYSDATE, 4500);
  -- TEST UPDATE
  UPDATE PURCHASE
  SET TOTAL_PURCHASE_PRICE = 340
  WHERE PURCHASE_ID = 1;
END;

SELECT * FROM PURCHASE;
SELECT * FROM PURCHASE_AUDIT;
DELETE FROM PURCHASE_AUDIT;
DELETE FROM PURCHASE;

DESCRIBE PURCHASE;
DESCRIBE PURCHASE_AUDIT;




